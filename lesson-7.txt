what would happen if we do console.log(useState()) ?
	useState() returns an array which contains variable, function to set that variable(setter function).
	Therefore, we will get an array.

How will useEffect act if we don't add dependency array ?
	useEffect() will be invoked after every render of our component.

what is SPA ?
	it's Single Page Application. Web pages are severed from the browser/client-side.
	It prevents the default method of a web browser loading entire new pages from the server.
	It's done by dynamically rewriting the current web page with new data from the web server.

what is the difference between client-side-routing and server-side-routing ?
	with server-side routing an entire new webpage is downloaded and served whenever you click on a link.
	This stack-overflow answer explains this in detail.
	
	On a webapp that uses server side routing:
		The browser detects that the user has clicked on an anchor element.
		It makes an HTTP GET request to the URL found in the href tag
		The server processes the request, and sends a new document (usually HTML) as a response.
		The browser discards the old webpage altogether, and displays the newly downloaded one.
		
	If the webapp uses client side routing:

	The browser detects that the user has clicked on an anchor element, just like before.
	A client side code (usually the routing library) catches this event, detects that the URL is not an external link, and then prevents the browser from making the HTTP GET request.
	The routing library then manually changes the URL displayed in the browser (using the HTML5 history API, or maybe URL hashbangs on older browsers)
	The routing library then changes the state of the client app. For example, it can change the root React/Angular/etc component according to the route rules.
	The app (particularly the MVC library, like React) then processes state changes. It renders the new components, and if necessary, it requests new data from the server. But this time the response isn't necessarily an entire webpage, it may also be "raw" data, in which case the client-side code turns it into HTML elements.
	Client-side routing sound more complicated, because it is. But some libraries really make it easy these days.
	There are several upsides of client-side routing: you download less data to display new content, you can reuse DOM elements, 
	display loading notifications to user etc. However, webapps that generate the DOM on server side are much easier to crawl (by search engines), 
	thereby making SEO optimization easier. Combining these two approaches is also possible, the excellent Flow Router SSR is a good example for that.